###########################################################################
# Set copy mode binding
###########################################################################

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-pipe "reattach-to-user-namespace pbcopy"
# The whole copy-select-paste procedure is: 
	# press ctrl + a + [ enter copy mode
	# use the same navigation keys as in vim to go to text we wish to copy
	# press v to start copy, and again use navigation keys to control the selection area
	# after the selecion, press y to copy the text into buffer, and then press ctrl + c to get out of copy mode
	# use ctrl + a + ] to paste the copied content


###########################################################################
# Reset Prefix
###########################################################################
# set -g prefix C-a
bind-key a send-prefix # for nested tmux sessions


###########################################################################
# Global options
############################################################################
# large history
set-option -g history-limit 10000

# colors
set-option -g default-terminal "screen-256color"
# set-option -g default-terminal "xterm-256color"

# basic settings
# set-window-option -g xterm-keys on # for vim
set-window-option -g mode-keys vi # vi key
set-window-option -g monitor-activity on

# Automatically set window title
# setw -g automatic-rename

# use mouse # More on mouse support http://floriancrouzat.net/2010/07/run-tmux-with-mouse-support-in-mac-os-x-terminal-app/
# setw -g mouse on
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# vi movement keys
# set-option -g status-keys vi


############################################################################
# Status Bar
############################################################################
set-option -g status-justify left
set-option -g status-bg black # colour213 # pink
set-option -g status-fg colour246
set-option -g status-interval 100
set-option -g status-left-length 30
set-option -g status-left ' '
set-option -g status-right '#[fg=red,bold]#(git branch) #[fg=magenta,bold][#S] #[fg=white]%R %m-%d#(acpi | cut -d ',' -f :)#[default]'
set-option -g visual-activity on
setw -g window-status-current-style fg=black,bold,bg=white

# Titles (window number, program name, active (or not)
# set-option -g set-titles on
# set-option -g set-titles-string '#H:#S.#I.#P #W #T'


############################################################################
# Unbindings
############################################################################
#unbind [ # copy mode bound to escape key
unbind j
unbind C-b # unbind default leader key
unbind '"' # unbind horizontal split
unbind %   # unbind vertical split


############################################################################
# Bindings
############################################################################
# reload tmux conf
bind-key r source-file ~/.tmux.conf

# new split in current pane (horizontal / vertical)
bind-key - split-window -v # split pane horizontally
bind-key \ split-window -h # split pane vertically

# list panes
# bind-key Space list-panes

# break-pane
# bind-key Enter break-pane

# join-pane [-dhv] [-l size | -p percentage] [-s src-pane]
# [-t:dst-window.dst-pane] (destination window (dot) destination pane
#                (alias: joinp)
#
# bind C-j command-prompt "joinp"
# bind C-j command-prompt "join-pane"
# bind-key j command-prompt "join-pane -s '%%'"
# bind-key j command-prompt "joinp -t:0"
# bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split

# previous pane
# bind-key -n C-up prev
# bind-key -n C-left prev

#next pane
# bind-key -n C-right next
# bind-key -n C-down next

############################################################################
# windows
############################################################################
# bind C-j previous-window
# bind C-k next-window
# bind-key C-a last-window # C-a C-a for last active window
# bind A command-prompt "rename-window %%"

# By default, all windows in a session are constrained to the size of the 
# smallest client connected to that session, 
# even if both clients are looking at different windows. 
# It seems that in this particular case, Screen has the better default 
# where a window is only constrained in size if a smaller client 
# is actively looking at it.
setw -g aggressive-resize on

############################################################################
# panes
############################################################################
# Navigation ---------------------------------------------------------------
# use the vim motion keys to move between panes
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# expand and close the command line pane when editing in vim on upper pane ---------------------------------------------------------------
bind-key u resize-pane -D 20 \; select-pane -t 0
bind-key i resize-pane -U 20 \; select-pane -t 1

############################################################################
# layouts
############################################################################
# bind o select-layout "active-only"
# bind M-- select-layout "even-vertical"
# bind M-| select-layout "even-horizontal"
# bind M-r rotate-window

# focus on first window
# select-window -t 0
